{"version":3,"sources":["components/Post.js","components/Posts.js","components/Pagination.js","components/SearchBar.js","images/reddit.jpg","components/Header.js","App.js","index.js"],"names":["Post","post","title","author","timestamp","created","comments","num_comments","ups","url","className","dateObj","Date","time","timeFull","toLocaleTimeString","hour","minute","split","modifier","hours","minutes","parseInt","getTime","date","toLocaleDateString","getDate","style","length","fontSize","slice","href","rel","target","Posts","posts","loading","currentPage","postsPerPage","indexLastPost","indexFistPost","currentPosts","role","map","index","data","Pagination","totalPosts","paginate","pageNumbers","i","Math","ceil","push","number","onClick","SerachBar","search","nameForm","useRef","ref","onSubmit","e","preventDefault","form","current","value","console","log","name","type","placeholder","Header","src","reddit","App","useState","setPosts","setLoading","setCurrentPage","searchWord","setSearchWord","fetchPosts","a","axios","get","response","children","useEffect","pageNumber","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.376bf769.chunk.js","sourcesContent":["const Post = ({post}) => {\n    const {title, author, created : timestamp, num_comments : comments, ups , url} = post;\n    \n    const getTime = timeFull => {\n        let time12h = timeFull.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n        const [time, modifier] = time12h.split(' ');   \n        let [hours, minutes] = time.split(':');\n        if (hours === '12') {\n          hours = '00';\n        }\n        if (modifier === 'PM') {\n          hours = parseInt(hours, 10) + 12;\n        }\n        return `${hours}:${minutes}`;\n    }\n\n    const getDate  = timestamp => {\n        let dateObj = new Date(timestamp);\n        let time = getTime(dateObj);\n        let date = dateObj.toLocaleDateString(\"en-GB\");\n        return `${time} ${date}`;\n    }\n     \n    return (  \n        <li className=\"list-group-item\">\n            <div className=\"user\">\n                {author}\n            </div>\n            <div className=\"date\"> {getDate(timestamp)}</div>\n            <h1 \n                style={ title.length > 30 ? {fontSize : 20 } : {fontSize : 24 } }\n                >\n                {title.length > 80 ? title.slice(0,80) + '...' : title }\n            </h1>\n            <div className=\"metrics\">\n                <div className=\"ups\">\n                    {ups}\n                </div>\n                <div className=\"comments\">\n                    {comments}\n                </div>\n            </div>\n            <a \n                href={url} \n                rel=\"noreferrer\"\n                target=\"_blank\"\n                >\n                <button className=\"btn btn-light\">Show on Reddit</button>\n            </a> \n        </li>\n    );\n}\n\nexport default Post;","import '../styles/Posts.css'\nimport React from \"react\";\nimport Post from \"../components/Post\";\n\nconst Posts = ({ posts, loading, currentPage, postsPerPage }) => {\n    const indexLastPost = currentPage * postsPerPage;\n    const indexFistPost = indexLastPost - postsPerPage;\n    const currentPosts = posts.slice(indexFistPost, indexLastPost);\n\n    if(loading){\n        return (\n            <div className=\"w-100 mt-5 mb-5 d-flex justify-content-center\">\n                  <div className=\"spinner-border text-info\" role=\"status\"></div>\n            </div>\n        );\n    }\n    else {\n        return ( \n            <ul className=\"list-group mb-4 flex-row flex-wrap justify-content-around\"> \n                { currentPosts.map( (post, index) => (\n                        <Post key={index} post={post.data} />\n                    )\n                )}\n            </ul>\n         );\n    }\n\n \n\n}\n\nexport default Posts;","const Pagination = ({postsPerPage, totalPosts, paginate}) => {\n    const pageNumbers = [];\n\n    for(let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++){\n        pageNumbers.push(i);\n    }\n\n    return ( \n        <nav>\n            <ul className=\"pagination justify-content-center\">\n                {pageNumbers.map(number => (\n                    <li key={number} className=\"page-item\">\n                        <a  \n                        className=\"page-link\" \n                        href=\"#/\"\n                        rel=\"noreferrer\"\n                        onClick={() => paginate(number)} \n                        >\n                            {number}\n                        </a>\n                     </li>\n                ))}\n            </ul>\n        </nav>\n     );\n}\n\nexport default Pagination ;","import { useRef } from \"react\";\n\nconst SerachBar = ({search}) => {\n    const nameForm = useRef(null);\n    \n    const handleSearchClick = (e) => {\n        e.preventDefault();\n       const form = nameForm.current;\n        search(form['searchword'].value);\n        console.log('search activated')\n    }\n    return ( \n        <div className=\"form-group d-flex  mb-3\">\n            <form ref={nameForm} onSubmit={handleSearchClick} >\n               <input  name=\"searchword\" type=\"text\" className=\"form-control\" placeholder=\"Type Your Subject...\" />\n               <button type=\"submit\" className=\"btn btn-primary mb-2\" >Search</button>\n \n            </form>  \n         </div>\n     );\n}\n\nexport default SerachBar;","export default __webpack_public_path__ + \"static/media/reddit.423bb9cb.jpg\";","import reddit from '../images/reddit.jpg';\n\nconst Header = () => {\n    return ( \n        <header className=\"pt-3 pb-3\">\n            <div className=\"header-wrapper\">\n                <img src={reddit} />\n                <h1 className=\"text-light \">Ask Reddit Anything</h1>\n            </div>\n        </header>\n     );\n}\n\nexport default Header;","import { useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/App.css';\nimport axios from 'axios';\nimport Posts from './components/Posts';\nimport Pagination from './components/Pagination';\nimport SerachBar from './components/SearchBar';\nimport Header from './components/Header';\n\nconst defaultURL = 'https://www.reddit.com/r/askreddit.json';\nconst postsPerPage = 6;\n\nfunction App() {\n   \n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchWord, setSearchWord] = useState('askreddit');\n  \n  const fetchPosts = async () =>  {\n    setLoading(true);\n    const response = await axios.get('https://www.reddit.com/r/'+ searchWord +'.json');\n    setPosts(response.data.data.children);\n    setLoading(false);\n    setCurrentPage(1)\n  }\n  const paginate = pageNumber => {\n    setCurrentPage(pageNumber);\n  } \n  // const generateReqUrl = keyword =>{\n  //     return 'https://www.reddit.com/r/'+ keyword +'.json';\n  // }\n  // const handleSearchEvent = (searchWord) => {\n  //   setUrl(generateReqUrl(searchWord));\n  //   fetchPosts();\n  //   setCurrentPage(1)\n  //   console.log('handleSearchEvent')\n  // }\n\n  useEffect(() => {\n    fetchPosts();\n  }, [searchWord])\n\n  return (\n    <>\n      <Header />\n      <main className=\"container-fluid mb-4\">\n            <SerachBar   search={setSearchWord}/>\n            <Posts \n                posts={posts} \n                loading={loading} \n                currentPage={currentPage} \n                postsPerPage={postsPerPage}\n             />\n            <Pagination \n                postsPerPage={postsPerPage} \n                totalPosts={posts.length} \n                paginate={paginate} \n             />\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}